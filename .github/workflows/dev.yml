name: Server Tests

on:
  push:
    branches:
      - dev

env:
  SERVER_PATH: PopcornPals-Server
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'
  OS_VERSION: ubuntu-latest   #${{ runner.os }}


jobs:        
  Clone-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Upload server code
        uses: actions/upload-artifact@v4
        with:
          name: server-code
          path: ${{ env.SERVER_PATH }}
  
  Build:
    runs-on: ubuntu-latest
    needs: Clone-repo
    steps:
      - name: Download server code
        uses: actions/download-artifact@v4
        with:
          name: server-code
          path: ${{ env.SERVER_PATH }}
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        working-directory: ${{ env.SERVER_PATH }}
        run: mvn clean install

  # Unit-tests:
  #   runs-on: ubuntu-latest
  #   needs: Build
  #   steps:
  #     - name: Set up JDK
  #       uses: actions/setup-java@v4
  #       with:
  #         java-version: ${{ env.JAVA_VERSION }}
  #         distribution: ${{ env.JAVA_DISTRIBUTION }}

  #     - name: Download server code
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: server-code
  #         path: ${{ env.SERVER_PATH }}

  #     - name: Run unit tests
  #       working-directory: ${{ env.SERVER_PATH }}
  #       run: mvn test

  # Dependency-Check:
  #   runs-on: ubuntu-latest
  #   needs: Build
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: recursive

  #     - name: Set up Java
  #       uses: actions/setup-java@v4
  #       with:
  #         java-version: ${{ env.JAVA_VERSION }}
  #         distribution: ${{ env.JAVA_DISTRIBUTION }}

  #     - name: Download OWASP Dependency-Check
  #       run: |
  #         wget https://github.com/jeremylong/DependencyCheck/releases/download/v10.0.2/dependency-check-10.0.2-release.zip
  #         unzip dependency-check-10.0.2-release.zip -d dependency-check

  #     - name: Set executable permissions
  #       run: chmod +x ./dependency-check/dependency-check/bin/dependency-check.sh

  #     - name: Run OWASP Dependency-Check on Server
  #       env:
  #         NVD_API_KEY: ${{ secrets.NVD_API }}
  #       run: |
  #         ./dependency-check/dependency-check/bin/dependency-check.sh --project "Server Project" --scan ./PopcornPals-Server --format "ALL" --nvdApiKey $NVD_API_KEY

  #     - name: Upload Dependency-Check Report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: dependency-check-report
  #         path: ./dependency-check-report.html
  ZAP-Scan:
    runs-on: ubuntu-latest
    needs: Build
    steps:
    - name: Download server code
      uses: actions/download-artifact@v4
      with:
        name: server-code
        path: ${{ env.SERVER_PATH }}
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}

    - name: Build with Maven
      working-directory: ${{ env.SERVER_PATH }}
      run: mvn clean install

    - name: Start Spring Boot Application
      working-directory: ${{ env.SERVER_PATH }}
      run: |
        nohup java -jar target/*.jar > output.log 2>&1 &
        sleep 30

    - name: Pull OWASP ZAP Docker image
      run: docker pull ictu/zap2docker-weekly

    - name: Run OWASP ZAP in daemon mode
      run: docker run -u zap -p 8090:8090 -d -v $(pwd)/zap_home:/home/zap/.ZAP -v $(pwd)/zap_reports:/zap/wrk ictu/zap2docker-weekly zap.sh -daemon -port 8090 -host 0.0.0.0 -config api.disablekey=true

    - name: Wait for OWASP ZAP to start
      run: sleep 30

    - name: Run ZAP scan
      run: |
        docker exec $(docker ps -q -f ancestor=ictu/zap2docker-weekly) /zap/zap-baseline.py -t http://host.docker.internal:8080 -g gen.conf -r zap_report.html

    - name: Upload ZAP HTML Report
      uses: actions/upload-artifact@v4
      with:
        name: zap-report-html
        path: zap_report.html

