name: Dev pipe server

on:
  push:
    branches:
      - dev

env:
  SERVER_PATH: PopcornPals-Server
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'
  OS_VERSION: ubuntu-latest   #${{ runner.os }}


jobs:        
  Clone-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Upload server code
        uses: actions/upload-artifact@v4
        with:
          name: server-code
          path: ${{ env.SERVER_PATH }}
  
  Build:
    runs-on: ubuntu-latest
    needs: Clone-repo
    steps:
      - name: Download server code
        uses: actions/download-artifact@v4
        with:
          name: server-code
          path: ${{ env.SERVER_PATH }}
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        working-directory: ${{ env.SERVER_PATH }}
        run: mvn clean install

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.SERVER_PATH }}/target/*.jar

  Unit-tests:
    runs-on: ubuntu-latest
    needs: Clone-repo
    steps:
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Download server code
        uses: actions/download-artifact@v4
        with:
          name: server-code
          path: ${{ env.SERVER_PATH }}

      - name: Run unit tests
        working-directory: ${{ env.SERVER_PATH }}
        run: mvn test

  SAST-check:
    runs-on: ubuntu-latest
    needs: Clone-repo
    steps:
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
    
      - name: Download server code
        uses: actions/download-artifact@v4
        with:
          name: server-code
          path: ${{ env.SERVER_PATH }}    

      - name: Run SpotBugs
        run: cd ${{ env.SERVER_PATH }} && mvn com.github.spotbugs:spotbugs-maven-plugin:spotbugs

  Dependency-Check:
    runs-on: ubuntu-latest
    needs: Clone-repo
    steps:
      - name: Download server code
        uses: actions/download-artifact@v4
        with:
          name: server-code
          path: ${{ env.SERVER_PATH }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Download OWASP Dependency-Check
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v10.0.2/dependency-check-10.0.2-release.zip
          unzip dependency-check-10.0.2-release.zip -d dependency-check

      - name: Set executable permissions
        run: chmod +x ./dependency-check/dependency-check/bin/dependency-check.sh

      - name: Run OWASP Dependency-Check on Server
        env:
          NVD_API_KEY: ${{ secrets.NVD_API }}
        run: |
          ./dependency-check/dependency-check/bin/dependency-check.sh --project "Popcorn Pals Server" --scan ./PopcornPals-Server --format "ALL" --nvdApiKey $NVD_API_KEY

      - name: Upload Dependency-Check Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: ./dependency-check-report.html
  
  Static-Analysis:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: server-code

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Install Checkstyle
        run: |
          wget -O checkstyle.jar https://github.com/checkstyle/checkstyle/releases/download/checkstyle-8.45/checkstyle-8.45-all.jar
          wget -O google_checks.xml https://raw.githubusercontent.com/checkstyle/checkstyle/master/src/main/resources/google_checks.xml

      - name: Run Checkstyle
        env: 
          CHECK_FILE: './src/checks.xml'
        run: |
          java -jar checkstyle.jar -c ${{ env.CHECK_FILE }} src/

  Create-Dockerfile:
    runs-on: ubuntu-latest
    steps:
    
      - name: Create Dockerfile
        run: |
          echo "FROM eclipse-temurin:21-jre" > Dockerfile
          echo "COPY target/*.jar app.jar" >> Dockerfile
          echo "ENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]" >> Dockerfile
      
      - name: Upload Dockerfile
        uses: actions/upload-artifact@v4
        with:
          name: dockerfile
          path: Dockerfile
          
  Docker-Deploy:
    runs-on: ubuntu-latest
    needs: 
      - Create-Dockerfile
      - Build
      - Unit-tests
    steps:

      - name: Download Dockerfile
        uses: actions/download-artifact@v4
        with:
          name: dockerfile
          path: .

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: target

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Check Docker Hub login status
        run: docker info

      - name: Build and push Docker image
        run: |
          docker build -t rangelplachkov/popcorn-pals-server:latest .
          docker push rangelplachkov/popcorn-pals-server:latest
